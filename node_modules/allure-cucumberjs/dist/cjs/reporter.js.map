{"version":3,"file":"reporter.js","names":["_cucumber","require","_messages","_nodeOs","_interopRequireDefault","_nodePath","_nodeProcess","_allureJsCommons","_sdk","_reporter","_legacy","_excluded","e","__esModule","default","ownKeys","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_objectWithoutProperties","i","_objectWithoutPropertiesLoose","n","indexOf","propertyIsEnumerable","call","hasOwnProperty","_toPropertyKey","value","configurable","writable","_toPrimitive","Symbol","toPrimitive","TypeError","String","Number","ALLURE_THREAD_NAME","ALLURE_TEST_MODE","process","env","AllureCucumberReporter","Formatter","constructor","options","Map","_ref","parsedArgvOptions","resultsDir","links","labels","rest","allureRuntime","ReporterRuntime","writer","MessageWriter","FileSystemWriter","linksConfigs","labelsConfigs","eventBroadcaster","on","parseEnvelope","bind","beforeHooks","supportCodeLibrary","beforeTestCaseHookDefinitions","reduce","acc","hook","assign","id","afterHooks","afterTestCaseHookDefinitions","World","AllureCucumberWorld","tagsIgnorePatterns","linkConfigEntries","entries","map","_ref2","v","flatMap","_ref3","pattern","envelope","gherkinDocument","onGherkinDocument","pickle","onPickle","testCase","onTestCase","testCaseStarted","onTestCaseStarted","testCaseFinished","onTestCaseFinished","attachment","onAttachment","testStepStarted","onTestStepStarted","testStepFinished","onTestStepFinished","testRunFinished","onTestRunFinished","parseTagsLabels","tags","matcher","matchedTags","tag","some","test","name","matchedLabels","tagValue","replace","parsePickleTags","LabelName","TAG","parseTagsLinks","tagKeyRe","_ref4","type","matchedLinks","url","applyLinkTemplate","urlTemplate","parseStatus","stepResult","_stepResult$exception","containsAssertionError","exception","status","TestStepResultStatus","FAILED","Status","BROKEN","PASSED","SKIPPED","PENDING","undefined","onRule","data","_data$children","children","c","scenario","onScenario","_data$feature","uri","documentMap","set","feature","rule","scenarioMap","steps","step","stepMap","pickleMap","ps","pickleStepMap","testCaseMap","testSteps","ts","testStepMap","_doc$feature","_doc$feature2","_doc$feature3","get","testCaseId","pickleId","doc","scenarioId","astNodeIds","fullName","concat","result","description","trim","md5","start","timestamp","nanos","getEnvironmentLabels","HOST","os","hostname","LANGUAGE","FRAMEWORK","THREAD","workerId","pid","toString","FEATURE","pickleLabels","featureLabels","featureLinks","scenarioLabels","scenarioLinks","scopeUuid","startScope","scopeUuids","testUuid","startTest","testResultUuids","testCaseStartedMap","examples","example","_example$tableHeader","csvDataTableHeader","tableHeader","cells","cell","join","csvDataTableBody","tableBody","row","csvDataTable","writeAttachment","Buffer","from","contentType","ContentType","CSV","fileExtension","testCaseStartedId","updateTest","getWorstStepResultStatus","stage","Stage","FINISHED","statusDetails","message","stopTest","stop","writeTest","delete","writeScope","_stepPickle$argument","testStepId","hookId","beforeHook","afterHook","fixtureUuid","startFixture","RUNNING","fixtureUuids","pickleStepId","stepPickle","stepKeyword","astNodeId","stepAstNode","keyword","find","stepUuid","startStep","createStepResult","text","argument","dataTable","rows","testStepResult","updateFixture","getMessageAndTraceFromError","stack","stackTrace","stopFixture","currentStep","updateStep","trace","stopStep","_message$fileName","rootUuid","mediaType","ALLURE_RUNTIME_MESSAGE_CONTENT_TYPE","parsedMessage","JSON","parse","body","applyRuntimeMessages","Array","isArray","encoding","contentEncoding","AttachmentContentEncoding","BASE64","fileName","content","extname","wrapInStep","writeCategoriesDefinitions","writeEnvironmentInfo","exports","module"],"sources":["../../src/reporter.ts"],"sourcesContent":["import type { IFormatterOptions, TestCaseHookDefinition } from \"@cucumber/cucumber\";\nimport { Formatter, World } from \"@cucumber/cucumber\";\nimport type * as messages from \"@cucumber/messages\";\nimport {\n  AttachmentContentEncoding,\n  type PickleTag,\n  type Tag,\n  type TestStepResult,\n  TestStepResultStatus,\n} from \"@cucumber/messages\";\nimport os from \"node:os\";\nimport { extname } from \"node:path\";\nimport process from \"node:process\";\nimport type { Label, Link, TestResult } from \"allure-js-commons\";\nimport { ContentType, LabelName, Stage, Status } from \"allure-js-commons\";\nimport { getMessageAndTraceFromError } from \"allure-js-commons/sdk\";\nimport {\n  ALLURE_RUNTIME_MESSAGE_CONTENT_TYPE,\n  FileSystemWriter,\n  MessageWriter,\n  ReporterRuntime,\n  applyLinkTemplate,\n  createStepResult,\n  getEnvironmentLabels,\n  getWorstStepResultStatus,\n  md5,\n} from \"allure-js-commons/sdk/reporter\";\nimport { AllureCucumberWorld } from \"./legacy.js\";\nimport type { AllureCucumberLinkConfig, AllureCucumberReporterConfig, LabelConfig } from \"./model.js\";\n\nconst { ALLURE_THREAD_NAME, ALLURE_TEST_MODE } = process.env;\n\nexport default class AllureCucumberReporter extends Formatter {\n  private readonly afterHooks: Record<string, TestCaseHookDefinition> = {};\n  private readonly beforeHooks: Record<string, TestCaseHookDefinition> = {};\n\n  private linksConfigs: AllureCucumberLinkConfig = {};\n  private labelsConfigs: LabelConfig[] = [];\n  private allureRuntime: ReporterRuntime;\n\n  private readonly documentMap: Map<string, messages.GherkinDocument> = new Map();\n  private readonly scenarioMap: Map<string, messages.Scenario> = new Map();\n  private readonly stepMap: Map<string, messages.Step> = new Map();\n  private readonly testStepMap: Map<string, messages.TestStep> = new Map();\n  private readonly pickleStepMap: Map<string, messages.PickleStep> = new Map();\n  private readonly pickleMap: Map<string, messages.Pickle> = new Map();\n  private readonly testCaseMap: Map<string, messages.TestCase> = new Map();\n  private readonly testCaseStartedMap: Map<string, messages.TestCaseStarted> = new Map();\n  private readonly testResultUuids: Map<string, string> = new Map();\n  private readonly scopeUuids: Map<string, string> = new Map();\n  private readonly fixtureUuids: Map<string, string> = new Map();\n\n  constructor(options: IFormatterOptions) {\n    super(options);\n\n    const {\n      resultsDir = \"./allure-results\",\n      links,\n      labels,\n      ...rest\n    } = options.parsedArgvOptions as AllureCucumberReporterConfig;\n\n    this.allureRuntime = new ReporterRuntime({\n      writer: ALLURE_TEST_MODE\n        ? new MessageWriter()\n        : new FileSystemWriter({\n            resultsDir,\n          }),\n      links,\n      ...rest,\n    });\n    this.linksConfigs = links || {};\n    this.labelsConfigs = labels || [];\n\n    options.eventBroadcaster.on(\"envelope\", this.parseEnvelope.bind(this));\n\n    this.beforeHooks = options.supportCodeLibrary.beforeTestCaseHookDefinitions.reduce(\n      (acc, hook) => Object.assign(acc, { [hook.id]: hook }),\n      {},\n    );\n    this.afterHooks = options.supportCodeLibrary.afterTestCaseHookDefinitions.reduce(\n      (acc, hook) => Object.assign(acc, { [hook.id]: hook }),\n      {},\n    );\n    // set AllureCucumberWorld for single thread mode\n    if (options.supportCodeLibrary.World === World) {\n      // @ts-ignore\n      // noinspection JSConstantReassignment\n      options.supportCodeLibrary.World = AllureCucumberWorld;\n    }\n  }\n\n  private get tagsIgnorePatterns(): RegExp[] {\n    const { labelsConfigs, linksConfigs } = this;\n    const linkConfigEntries = Object.entries(linksConfigs).map(([, v]) => v);\n    return [...labelsConfigs, ...linkConfigEntries].flatMap(({ pattern }) => pattern);\n  }\n\n  private parseEnvelope(envelope: messages.Envelope) {\n    switch (true) {\n      case !!envelope.gherkinDocument:\n        this.onGherkinDocument(envelope.gherkinDocument);\n        break;\n      case !!envelope.pickle:\n        this.onPickle(envelope.pickle);\n        break;\n      case !!envelope.testCase:\n        this.onTestCase(envelope.testCase);\n        break;\n      case !!envelope.testCaseStarted:\n        this.onTestCaseStarted(envelope.testCaseStarted);\n        break;\n      case !!envelope.testCaseFinished:\n        this.onTestCaseFinished(envelope.testCaseFinished);\n        break;\n      case !!envelope.attachment:\n        this.onAttachment(envelope.attachment);\n        break;\n      case !!envelope.testStepStarted:\n        this.onTestStepStarted(envelope.testStepStarted);\n        break;\n      case !!envelope.testStepFinished:\n        this.onTestStepFinished(envelope.testStepFinished);\n        break;\n      case !!envelope.testRunFinished:\n        this.onTestRunFinished();\n        break;\n    }\n  }\n\n  private parseTagsLabels(tags: readonly Tag[]): Label[] {\n    const labels: Label[] = [];\n\n    if (this.labelsConfigs.length === 0) {\n      return labels;\n    }\n\n    this.labelsConfigs.forEach((matcher) => {\n      const matchedTags = tags.filter((tag) => matcher.pattern.some((pattern) => pattern.test(tag.name)));\n      const matchedLabels = matchedTags.map((tag) => {\n        const tagValue = tag.name.replace(/^@\\S+:/, \"\");\n\n        return {\n          name: matcher.name,\n          value: tagValue,\n        };\n      });\n\n      labels.push(...matchedLabels);\n    });\n\n    return labels;\n  }\n\n  private parsePickleTags(tags: readonly PickleTag[]): Label[] {\n    return tags\n      .filter((tag) => !this.tagsIgnorePatterns.some((pattern) => pattern.test(tag.name)))\n      .map((tag) => ({\n        name: LabelName.TAG,\n        value: tag.name,\n      }));\n  }\n\n  private parseTagsLinks(tags: readonly Tag[]): Link[] {\n    const tagKeyRe = /^@\\S+=/;\n    const links: Link[] = [];\n\n    if (Object.keys(this.linksConfigs).length === 0) {\n      return links;\n    }\n\n    Object.entries(this.linksConfigs).forEach(([type, matcher]) => {\n      const matchedTags = tags.filter((tag) => matcher.pattern.some((pattern) => pattern.test(tag.name)));\n      const matchedLinks = matchedTags.map((tag) => {\n        const tagValue = tag.name.replace(tagKeyRe, \"\");\n\n        return {\n          url: applyLinkTemplate(matcher.urlTemplate, tagValue) || tagValue,\n          type,\n        };\n      });\n\n      links.push(...matchedLinks);\n    });\n\n    return links;\n  }\n\n  private parseStatus(stepResult: TestStepResult): Status | undefined {\n    const containsAssertionError = /assertion/i.test(stepResult?.exception?.type || \"\");\n\n    switch (stepResult.status) {\n      case TestStepResultStatus.FAILED:\n        return containsAssertionError ? Status.FAILED : Status.BROKEN;\n      case TestStepResultStatus.PASSED:\n        return Status.PASSED;\n      case TestStepResultStatus.SKIPPED:\n      case TestStepResultStatus.PENDING:\n        return Status.SKIPPED;\n      default:\n        return undefined;\n    }\n  }\n\n  private onRule(data: messages.Rule): void {\n    data.children?.forEach((c) => {\n      if (c.scenario) {\n        this.onScenario(c.scenario);\n      }\n    });\n  }\n\n  private onGherkinDocument(data: messages.GherkinDocument): void {\n    if (data.uri) {\n      this.documentMap.set(data.uri, data);\n    }\n\n    data.feature?.children?.forEach((c) => {\n      if (c.rule) {\n        this.onRule(c.rule);\n      } else if (c.scenario) {\n        this.onScenario(c.scenario);\n      }\n    });\n  }\n\n  private onScenario(data: messages.Scenario): void {\n    this.scenarioMap.set(data.id, data);\n    data.steps.forEach((step) => this.stepMap.set(step.id, step));\n  }\n\n  private onPickle(data: messages.Pickle): void {\n    this.pickleMap.set(data.id, data);\n    data.steps.forEach((ps) => this.pickleStepMap.set(ps.id, ps));\n  }\n\n  private onTestCase(data: messages.TestCase): void {\n    this.testCaseMap.set(data.id, data);\n    data.testSteps.forEach((ts) => this.testStepMap.set(ts.id, ts));\n  }\n\n  private onTestCaseStarted(data: messages.TestCaseStarted) {\n    const testCase = this.testCaseMap.get(data.testCaseId)!;\n    const pickle = this.pickleMap.get(testCase.pickleId)!;\n    const doc = this.documentMap.get(pickle.uri)!;\n    const [scenarioId] = pickle.astNodeIds;\n    const scenario = this.scenarioMap.get(scenarioId);\n    const fullName = `${pickle.uri}#${pickle.name}`;\n    const result: Partial<TestResult> = {\n      name: pickle.name,\n      description: (scenario?.description || doc?.feature?.description || \"\").trim(),\n      labels: [],\n      links: [],\n      testCaseId: md5(fullName),\n      start: data.timestamp.nanos / 1000,\n      fullName,\n    };\n\n    result.labels!.push(...getEnvironmentLabels());\n    result.labels!.push(\n      {\n        name: LabelName.HOST,\n        value: os.hostname(),\n      },\n      {\n        name: LabelName.LANGUAGE,\n        value: \"javascript\",\n      },\n      {\n        name: LabelName.FRAMEWORK,\n        value: \"cucumberjs\",\n      },\n      {\n        name: LabelName.THREAD,\n        value: data.workerId || ALLURE_THREAD_NAME || process.pid.toString(),\n      },\n    );\n\n    if (doc?.feature) {\n      result.labels!.push({\n        name: LabelName.FEATURE,\n        value: doc.feature.name,\n      });\n    }\n\n    const pickleLabels = this.parsePickleTags(pickle.tags || []);\n    const featureLabels = this.parseTagsLabels(doc?.feature?.tags || []);\n    const featureLinks = this.parseTagsLinks(doc?.feature?.tags || []);\n    const scenarioLabels = this.parseTagsLabels(scenario?.tags || []);\n    const scenarioLinks = this.parseTagsLinks(scenario?.tags || []);\n\n    result.labels!.push(...featureLabels, ...scenarioLabels, ...pickleLabels);\n    result.links!.push(...featureLinks, ...scenarioLinks);\n\n    const scopeUuid = this.allureRuntime.startScope();\n    this.scopeUuids.set(data.id, scopeUuid);\n\n    const testUuid = this.allureRuntime.startTest(result, [scopeUuid]);\n    this.testResultUuids.set(data.id, testUuid);\n\n    this.testCaseStartedMap.set(data.id, data);\n\n    if (!scenario?.examples) {\n      return;\n    }\n\n    scenario.examples.forEach((example) => {\n      const csvDataTableHeader = example?.tableHeader?.cells.map((cell) => cell.value).join(\",\") || \"\";\n      const csvDataTableBody =\n        example?.tableBody.map((row) => row.cells.map((cell) => cell.value).join(\",\")).join(\"\\n\") || \"\";\n\n      if (!csvDataTableHeader && !csvDataTableBody) {\n        return;\n      }\n\n      const csvDataTable = `${csvDataTableHeader}\\n${csvDataTableBody}\\n`;\n\n      this.allureRuntime.writeAttachment(testUuid, null, \"Examples\", Buffer.from(csvDataTable, \"utf-8\"), {\n        contentType: ContentType.CSV,\n        fileExtension: \".csv\",\n      });\n    });\n  }\n\n  private onTestCaseFinished(data: messages.TestCaseFinished) {\n    const testUuid = this.testResultUuids.get(data.testCaseStartedId);\n    if (!testUuid) {\n      return;\n    }\n\n    this.allureRuntime.updateTest(testUuid, (result) => {\n      result.status = result.steps.length > 0 ? getWorstStepResultStatus(result.steps) : Status.PASSED;\n      result.stage = Stage.FINISHED;\n\n      if (result.status === undefined) {\n        result.statusDetails = {\n          message: \"The test doesn't have an implementation.\",\n        };\n      }\n    });\n    this.allureRuntime.stopTest(testUuid, { stop: data.timestamp.nanos / 1000 });\n    this.allureRuntime.writeTest(testUuid);\n    this.testResultUuids.delete(data.testCaseStartedId);\n\n    const scopeUuid = this.scopeUuids.get(data.testCaseStartedId);\n    if (scopeUuid) {\n      this.allureRuntime.writeScope(scopeUuid);\n      this.scopeUuids.delete(data.testCaseStartedId);\n    }\n  }\n\n  private onTestStepStarted(data: messages.TestStepStarted) {\n    const testUuid = this.testResultUuids.get(data.testCaseStartedId)!;\n    const step = this.testStepMap.get(data.testStepId)!;\n    if (step.hookId) {\n      const scopeUuid = this.scopeUuids.get(data.testCaseStartedId);\n      if (!scopeUuid) {\n        return;\n      }\n\n      const beforeHook = step.hookId && this.beforeHooks[step.hookId];\n      const afterHook = step.hookId && this.afterHooks[step.hookId];\n\n      const type = beforeHook ? \"before\" : afterHook ? \"after\" : undefined;\n      if (!type) {\n        return;\n      }\n      const name = beforeHook ? beforeHook.name : afterHook ? afterHook.name : \"hook\";\n      if (name === \"ALLURE_FIXTURE_IGNORE\") {\n        return;\n      }\n\n      const fixtureUuid = this.allureRuntime.startFixture(scopeUuid, type, {\n        name,\n        stage: Stage.RUNNING,\n        start: data.timestamp.nanos / 1000,\n      });\n      if (fixtureUuid) {\n        this.fixtureUuids.set(data.testCaseStartedId, fixtureUuid);\n      }\n      return;\n    }\n\n    if (!step.pickleStepId) {\n      return;\n    }\n\n    const stepPickle = this.pickleStepMap.get(step.pickleStepId)!;\n\n    if (!stepPickle) {\n      return;\n    }\n\n    const stepKeyword =\n      stepPickle.astNodeIds\n        .map((astNodeId) => this.stepMap.get(astNodeId))\n        .map((stepAstNode) => stepAstNode?.keyword)\n        .find((keyword) => keyword !== undefined) || \"\";\n\n    const stepUuid = this.allureRuntime.startStep(testUuid, undefined, {\n      ...createStepResult(),\n      name: `${stepKeyword}${stepPickle.text}`,\n      start: data.timestamp.nanos / 1000,\n    });\n\n    if (!stepPickle.argument?.dataTable) {\n      return;\n    }\n\n    const csvDataTable = stepPickle.argument.dataTable.rows.reduce(\n      (acc, row) => `${acc + row.cells.map((cell) => cell.value).join(\",\")}\\n`,\n      \"\",\n    );\n\n    this.allureRuntime.writeAttachment(testUuid, stepUuid, \"Data table\", Buffer.from(csvDataTable, \"utf-8\"), {\n      contentType: ContentType.CSV,\n      fileExtension: \".csv\",\n    });\n  }\n\n  private onTestStepFinished(data: messages.TestStepFinished) {\n    const step = this.testStepMap.get(data.testStepId);\n    if (!step) {\n      return;\n    }\n\n    const status = this.parseStatus(data.testStepResult);\n    const stage = status !== Status.SKIPPED ? Stage.FINISHED : Stage.PENDING;\n\n    if (step.hookId) {\n      const fixtureUuid = this.fixtureUuids.get(data.testCaseStartedId);\n      if (!fixtureUuid) {\n        return;\n      }\n\n      this.allureRuntime.updateFixture(fixtureUuid, (r) => {\n        r.stage = stage;\n        r.status = status;\n\n        if (data.testStepResult.exception) {\n          r.statusDetails = getMessageAndTraceFromError({\n            message: data.testStepResult.message,\n            stack: data.testStepResult.exception.stackTrace,\n          });\n        }\n      });\n      this.allureRuntime.stopFixture(fixtureUuid, { stop: data.timestamp.nanos / 1000 });\n      this.fixtureUuids.delete(data.testCaseStartedId);\n      return;\n    }\n\n    const testUuid = this.testResultUuids.get(data.testCaseStartedId)!;\n    const currentStep = this.allureRuntime.currentStep(testUuid);\n\n    if (!currentStep) {\n      return;\n    }\n\n    this.allureRuntime.updateStep(currentStep, (r) => {\n      r.status = status;\n      r.stage = stage;\n\n      if (status === undefined) {\n        r.statusDetails = {\n          message: \"The step doesn't have an implementation.\",\n        };\n        return;\n      }\n\n      if (data.testStepResult.exception) {\n        r.statusDetails = {\n          message: data.testStepResult.message,\n          trace: data.testStepResult.exception.stackTrace,\n        };\n      }\n    });\n\n    this.allureRuntime.stopStep(currentStep, { stop: data.timestamp.nanos / 1000 });\n  }\n\n  private onAttachment(message: messages.Attachment): void {\n    if (!message.testCaseStartedId) {\n      return;\n    }\n\n    const fixtureUuid = this.fixtureUuids.get(message.testCaseStartedId);\n    const testUuid = this.testResultUuids.get(message.testCaseStartedId);\n    const rootUuid = fixtureUuid ?? testUuid;\n    if (!rootUuid) {\n      return;\n    }\n\n    if (message.mediaType === \"application/vnd.allure.skipcucumber+json\") {\n      if (testUuid) {\n        this.allureRuntime.updateTest(testUuid, (result) => {\n          result.labels.push({ name: \"ALLURE_TESTPLAN_SKIP\", value: \"true\" });\n        });\n      }\n      return;\n    }\n\n    if (message.mediaType === ALLURE_RUNTIME_MESSAGE_CONTENT_TYPE) {\n      const parsedMessage = JSON.parse(message.body);\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      this.allureRuntime.applyRuntimeMessages(rootUuid, Array.isArray(parsedMessage) ? parsedMessage : [parsedMessage]);\n      return;\n    }\n\n    const encoding: BufferEncoding = message.contentEncoding === AttachmentContentEncoding.BASE64 ? \"base64\" : \"utf-8\";\n\n    this.allureRuntime.applyRuntimeMessages(rootUuid, [\n      {\n        type: \"attachment_content\",\n        data: {\n          name: message.fileName ?? \"Attachment\",\n          content: Buffer.from(message.body, encoding).toString(\"base64\"),\n          encoding: \"base64\",\n          contentType: message.mediaType,\n          fileExtension: message.fileName ? extname(message.fileName) : undefined,\n          wrapInStep: true,\n        },\n      },\n    ]);\n  }\n\n  private onTestRunFinished() {\n    this.allureRuntime.writeCategoriesDefinitions();\n    this.allureRuntime.writeEnvironmentInfo();\n  }\n}\n"],"mappings":"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","ignoreList":[]}