{"version":3,"file":"reporter.js","names":["Formatter","World","AttachmentContentEncoding","TestStepResultStatus","os","extname","process","ContentType","LabelName","Stage","Status","getMessageAndTraceFromError","ALLURE_RUNTIME_MESSAGE_CONTENT_TYPE","FileSystemWriter","MessageWriter","ReporterRuntime","applyLinkTemplate","createStepResult","getEnvironmentLabels","getWorstStepResultStatus","md5","AllureCucumberWorld","ALLURE_THREAD_NAME","ALLURE_TEST_MODE","env","AllureCucumberReporter","constructor","options","_defineProperty","Map","_ref","parsedArgvOptions","resultsDir","links","labels","rest","_objectWithoutProperties","_excluded","allureRuntime","_objectSpread","writer","linksConfigs","labelsConfigs","eventBroadcaster","on","parseEnvelope","bind","beforeHooks","supportCodeLibrary","beforeTestCaseHookDefinitions","reduce","acc","hook","Object","assign","id","afterHooks","afterTestCaseHookDefinitions","tagsIgnorePatterns","linkConfigEntries","entries","map","_ref2","v","flatMap","_ref3","pattern","envelope","gherkinDocument","onGherkinDocument","pickle","onPickle","testCase","onTestCase","testCaseStarted","onTestCaseStarted","testCaseFinished","onTestCaseFinished","attachment","onAttachment","testStepStarted","onTestStepStarted","testStepFinished","onTestStepFinished","testRunFinished","onTestRunFinished","parseTagsLabels","tags","length","forEach","matcher","matchedTags","filter","tag","some","test","name","matchedLabels","tagValue","replace","value","push","parsePickleTags","TAG","parseTagsLinks","tagKeyRe","keys","_ref4","type","matchedLinks","url","urlTemplate","parseStatus","stepResult","_stepResult$exception","containsAssertionError","exception","status","FAILED","BROKEN","PASSED","SKIPPED","PENDING","undefined","onRule","data","_data$children","children","c","scenario","onScenario","_data$feature","uri","documentMap","set","feature","rule","scenarioMap","steps","step","stepMap","pickleMap","ps","pickleStepMap","testCaseMap","testSteps","ts","testStepMap","_doc$feature","_doc$feature2","_doc$feature3","get","testCaseId","pickleId","doc","scenarioId","astNodeIds","fullName","concat","result","description","trim","start","timestamp","nanos","HOST","hostname","LANGUAGE","FRAMEWORK","THREAD","workerId","pid","toString","FEATURE","pickleLabels","featureLabels","featureLinks","scenarioLabels","scenarioLinks","scopeUuid","startScope","scopeUuids","testUuid","startTest","testResultUuids","testCaseStartedMap","examples","example","_example$tableHeader","csvDataTableHeader","tableHeader","cells","cell","join","csvDataTableBody","tableBody","row","csvDataTable","writeAttachment","Buffer","from","contentType","CSV","fileExtension","testCaseStartedId","updateTest","stage","FINISHED","statusDetails","message","stopTest","stop","writeTest","delete","writeScope","_stepPickle$argument","testStepId","hookId","beforeHook","afterHook","fixtureUuid","startFixture","RUNNING","fixtureUuids","pickleStepId","stepPickle","stepKeyword","astNodeId","stepAstNode","keyword","find","stepUuid","startStep","text","argument","dataTable","rows","testStepResult","updateFixture","r","stack","stackTrace","stopFixture","currentStep","updateStep","trace","stopStep","_message$fileName","rootUuid","mediaType","parsedMessage","JSON","parse","body","applyRuntimeMessages","Array","isArray","encoding","contentEncoding","BASE64","fileName","content","wrapInStep","writeCategoriesDefinitions","writeEnvironmentInfo"],"sources":["../../src/reporter.ts"],"sourcesContent":["import type { IFormatterOptions, TestCaseHookDefinition } from \"@cucumber/cucumber\";\nimport { Formatter, World } from \"@cucumber/cucumber\";\nimport type * as messages from \"@cucumber/messages\";\nimport {\n  AttachmentContentEncoding,\n  type PickleTag,\n  type Tag,\n  type TestStepResult,\n  TestStepResultStatus,\n} from \"@cucumber/messages\";\nimport os from \"node:os\";\nimport { extname } from \"node:path\";\nimport process from \"node:process\";\nimport type { Label, Link, TestResult } from \"allure-js-commons\";\nimport { ContentType, LabelName, Stage, Status } from \"allure-js-commons\";\nimport { getMessageAndTraceFromError } from \"allure-js-commons/sdk\";\nimport {\n  ALLURE_RUNTIME_MESSAGE_CONTENT_TYPE,\n  FileSystemWriter,\n  MessageWriter,\n  ReporterRuntime,\n  applyLinkTemplate,\n  createStepResult,\n  getEnvironmentLabels,\n  getWorstStepResultStatus,\n  md5,\n} from \"allure-js-commons/sdk/reporter\";\nimport { AllureCucumberWorld } from \"./legacy.js\";\nimport type { AllureCucumberLinkConfig, AllureCucumberReporterConfig, LabelConfig } from \"./model.js\";\n\nconst { ALLURE_THREAD_NAME, ALLURE_TEST_MODE } = process.env;\n\nexport default class AllureCucumberReporter extends Formatter {\n  private readonly afterHooks: Record<string, TestCaseHookDefinition> = {};\n  private readonly beforeHooks: Record<string, TestCaseHookDefinition> = {};\n\n  private linksConfigs: AllureCucumberLinkConfig = {};\n  private labelsConfigs: LabelConfig[] = [];\n  private allureRuntime: ReporterRuntime;\n\n  private readonly documentMap: Map<string, messages.GherkinDocument> = new Map();\n  private readonly scenarioMap: Map<string, messages.Scenario> = new Map();\n  private readonly stepMap: Map<string, messages.Step> = new Map();\n  private readonly testStepMap: Map<string, messages.TestStep> = new Map();\n  private readonly pickleStepMap: Map<string, messages.PickleStep> = new Map();\n  private readonly pickleMap: Map<string, messages.Pickle> = new Map();\n  private readonly testCaseMap: Map<string, messages.TestCase> = new Map();\n  private readonly testCaseStartedMap: Map<string, messages.TestCaseStarted> = new Map();\n  private readonly testResultUuids: Map<string, string> = new Map();\n  private readonly scopeUuids: Map<string, string> = new Map();\n  private readonly fixtureUuids: Map<string, string> = new Map();\n\n  constructor(options: IFormatterOptions) {\n    super(options);\n\n    const {\n      resultsDir = \"./allure-results\",\n      links,\n      labels,\n      ...rest\n    } = options.parsedArgvOptions as AllureCucumberReporterConfig;\n\n    this.allureRuntime = new ReporterRuntime({\n      writer: ALLURE_TEST_MODE\n        ? new MessageWriter()\n        : new FileSystemWriter({\n            resultsDir,\n          }),\n      links,\n      ...rest,\n    });\n    this.linksConfigs = links || {};\n    this.labelsConfigs = labels || [];\n\n    options.eventBroadcaster.on(\"envelope\", this.parseEnvelope.bind(this));\n\n    this.beforeHooks = options.supportCodeLibrary.beforeTestCaseHookDefinitions.reduce(\n      (acc, hook) => Object.assign(acc, { [hook.id]: hook }),\n      {},\n    );\n    this.afterHooks = options.supportCodeLibrary.afterTestCaseHookDefinitions.reduce(\n      (acc, hook) => Object.assign(acc, { [hook.id]: hook }),\n      {},\n    );\n    // set AllureCucumberWorld for single thread mode\n    if (options.supportCodeLibrary.World === World) {\n      // @ts-ignore\n      // noinspection JSConstantReassignment\n      options.supportCodeLibrary.World = AllureCucumberWorld;\n    }\n  }\n\n  private get tagsIgnorePatterns(): RegExp[] {\n    const { labelsConfigs, linksConfigs } = this;\n    const linkConfigEntries = Object.entries(linksConfigs).map(([, v]) => v);\n    return [...labelsConfigs, ...linkConfigEntries].flatMap(({ pattern }) => pattern);\n  }\n\n  private parseEnvelope(envelope: messages.Envelope) {\n    switch (true) {\n      case !!envelope.gherkinDocument:\n        this.onGherkinDocument(envelope.gherkinDocument);\n        break;\n      case !!envelope.pickle:\n        this.onPickle(envelope.pickle);\n        break;\n      case !!envelope.testCase:\n        this.onTestCase(envelope.testCase);\n        break;\n      case !!envelope.testCaseStarted:\n        this.onTestCaseStarted(envelope.testCaseStarted);\n        break;\n      case !!envelope.testCaseFinished:\n        this.onTestCaseFinished(envelope.testCaseFinished);\n        break;\n      case !!envelope.attachment:\n        this.onAttachment(envelope.attachment);\n        break;\n      case !!envelope.testStepStarted:\n        this.onTestStepStarted(envelope.testStepStarted);\n        break;\n      case !!envelope.testStepFinished:\n        this.onTestStepFinished(envelope.testStepFinished);\n        break;\n      case !!envelope.testRunFinished:\n        this.onTestRunFinished();\n        break;\n    }\n  }\n\n  private parseTagsLabels(tags: readonly Tag[]): Label[] {\n    const labels: Label[] = [];\n\n    if (this.labelsConfigs.length === 0) {\n      return labels;\n    }\n\n    this.labelsConfigs.forEach((matcher) => {\n      const matchedTags = tags.filter((tag) => matcher.pattern.some((pattern) => pattern.test(tag.name)));\n      const matchedLabels = matchedTags.map((tag) => {\n        const tagValue = tag.name.replace(/^@\\S+:/, \"\");\n\n        return {\n          name: matcher.name,\n          value: tagValue,\n        };\n      });\n\n      labels.push(...matchedLabels);\n    });\n\n    return labels;\n  }\n\n  private parsePickleTags(tags: readonly PickleTag[]): Label[] {\n    return tags\n      .filter((tag) => !this.tagsIgnorePatterns.some((pattern) => pattern.test(tag.name)))\n      .map((tag) => ({\n        name: LabelName.TAG,\n        value: tag.name,\n      }));\n  }\n\n  private parseTagsLinks(tags: readonly Tag[]): Link[] {\n    const tagKeyRe = /^@\\S+=/;\n    const links: Link[] = [];\n\n    if (Object.keys(this.linksConfigs).length === 0) {\n      return links;\n    }\n\n    Object.entries(this.linksConfigs).forEach(([type, matcher]) => {\n      const matchedTags = tags.filter((tag) => matcher.pattern.some((pattern) => pattern.test(tag.name)));\n      const matchedLinks = matchedTags.map((tag) => {\n        const tagValue = tag.name.replace(tagKeyRe, \"\");\n\n        return {\n          url: applyLinkTemplate(matcher.urlTemplate, tagValue) || tagValue,\n          type,\n        };\n      });\n\n      links.push(...matchedLinks);\n    });\n\n    return links;\n  }\n\n  private parseStatus(stepResult: TestStepResult): Status | undefined {\n    const containsAssertionError = /assertion/i.test(stepResult?.exception?.type || \"\");\n\n    switch (stepResult.status) {\n      case TestStepResultStatus.FAILED:\n        return containsAssertionError ? Status.FAILED : Status.BROKEN;\n      case TestStepResultStatus.PASSED:\n        return Status.PASSED;\n      case TestStepResultStatus.SKIPPED:\n      case TestStepResultStatus.PENDING:\n        return Status.SKIPPED;\n      default:\n        return undefined;\n    }\n  }\n\n  private onRule(data: messages.Rule): void {\n    data.children?.forEach((c) => {\n      if (c.scenario) {\n        this.onScenario(c.scenario);\n      }\n    });\n  }\n\n  private onGherkinDocument(data: messages.GherkinDocument): void {\n    if (data.uri) {\n      this.documentMap.set(data.uri, data);\n    }\n\n    data.feature?.children?.forEach((c) => {\n      if (c.rule) {\n        this.onRule(c.rule);\n      } else if (c.scenario) {\n        this.onScenario(c.scenario);\n      }\n    });\n  }\n\n  private onScenario(data: messages.Scenario): void {\n    this.scenarioMap.set(data.id, data);\n    data.steps.forEach((step) => this.stepMap.set(step.id, step));\n  }\n\n  private onPickle(data: messages.Pickle): void {\n    this.pickleMap.set(data.id, data);\n    data.steps.forEach((ps) => this.pickleStepMap.set(ps.id, ps));\n  }\n\n  private onTestCase(data: messages.TestCase): void {\n    this.testCaseMap.set(data.id, data);\n    data.testSteps.forEach((ts) => this.testStepMap.set(ts.id, ts));\n  }\n\n  private onTestCaseStarted(data: messages.TestCaseStarted) {\n    const testCase = this.testCaseMap.get(data.testCaseId)!;\n    const pickle = this.pickleMap.get(testCase.pickleId)!;\n    const doc = this.documentMap.get(pickle.uri)!;\n    const [scenarioId] = pickle.astNodeIds;\n    const scenario = this.scenarioMap.get(scenarioId);\n    const fullName = `${pickle.uri}#${pickle.name}`;\n    const result: Partial<TestResult> = {\n      name: pickle.name,\n      description: (scenario?.description || doc?.feature?.description || \"\").trim(),\n      labels: [],\n      links: [],\n      testCaseId: md5(fullName),\n      start: data.timestamp.nanos / 1000,\n      fullName,\n    };\n\n    result.labels!.push(...getEnvironmentLabels());\n    result.labels!.push(\n      {\n        name: LabelName.HOST,\n        value: os.hostname(),\n      },\n      {\n        name: LabelName.LANGUAGE,\n        value: \"javascript\",\n      },\n      {\n        name: LabelName.FRAMEWORK,\n        value: \"cucumberjs\",\n      },\n      {\n        name: LabelName.THREAD,\n        value: data.workerId || ALLURE_THREAD_NAME || process.pid.toString(),\n      },\n    );\n\n    if (doc?.feature) {\n      result.labels!.push({\n        name: LabelName.FEATURE,\n        value: doc.feature.name,\n      });\n    }\n\n    const pickleLabels = this.parsePickleTags(pickle.tags || []);\n    const featureLabels = this.parseTagsLabels(doc?.feature?.tags || []);\n    const featureLinks = this.parseTagsLinks(doc?.feature?.tags || []);\n    const scenarioLabels = this.parseTagsLabels(scenario?.tags || []);\n    const scenarioLinks = this.parseTagsLinks(scenario?.tags || []);\n\n    result.labels!.push(...featureLabels, ...scenarioLabels, ...pickleLabels);\n    result.links!.push(...featureLinks, ...scenarioLinks);\n\n    const scopeUuid = this.allureRuntime.startScope();\n    this.scopeUuids.set(data.id, scopeUuid);\n\n    const testUuid = this.allureRuntime.startTest(result, [scopeUuid]);\n    this.testResultUuids.set(data.id, testUuid);\n\n    this.testCaseStartedMap.set(data.id, data);\n\n    if (!scenario?.examples) {\n      return;\n    }\n\n    scenario.examples.forEach((example) => {\n      const csvDataTableHeader = example?.tableHeader?.cells.map((cell) => cell.value).join(\",\") || \"\";\n      const csvDataTableBody =\n        example?.tableBody.map((row) => row.cells.map((cell) => cell.value).join(\",\")).join(\"\\n\") || \"\";\n\n      if (!csvDataTableHeader && !csvDataTableBody) {\n        return;\n      }\n\n      const csvDataTable = `${csvDataTableHeader}\\n${csvDataTableBody}\\n`;\n\n      this.allureRuntime.writeAttachment(testUuid, null, \"Examples\", Buffer.from(csvDataTable, \"utf-8\"), {\n        contentType: ContentType.CSV,\n        fileExtension: \".csv\",\n      });\n    });\n  }\n\n  private onTestCaseFinished(data: messages.TestCaseFinished) {\n    const testUuid = this.testResultUuids.get(data.testCaseStartedId);\n    if (!testUuid) {\n      return;\n    }\n\n    this.allureRuntime.updateTest(testUuid, (result) => {\n      result.status = result.steps.length > 0 ? getWorstStepResultStatus(result.steps) : Status.PASSED;\n      result.stage = Stage.FINISHED;\n\n      if (result.status === undefined) {\n        result.statusDetails = {\n          message: \"The test doesn't have an implementation.\",\n        };\n      }\n    });\n    this.allureRuntime.stopTest(testUuid, { stop: data.timestamp.nanos / 1000 });\n    this.allureRuntime.writeTest(testUuid);\n    this.testResultUuids.delete(data.testCaseStartedId);\n\n    const scopeUuid = this.scopeUuids.get(data.testCaseStartedId);\n    if (scopeUuid) {\n      this.allureRuntime.writeScope(scopeUuid);\n      this.scopeUuids.delete(data.testCaseStartedId);\n    }\n  }\n\n  private onTestStepStarted(data: messages.TestStepStarted) {\n    const testUuid = this.testResultUuids.get(data.testCaseStartedId)!;\n    const step = this.testStepMap.get(data.testStepId)!;\n    if (step.hookId) {\n      const scopeUuid = this.scopeUuids.get(data.testCaseStartedId);\n      if (!scopeUuid) {\n        return;\n      }\n\n      const beforeHook = step.hookId && this.beforeHooks[step.hookId];\n      const afterHook = step.hookId && this.afterHooks[step.hookId];\n\n      const type = beforeHook ? \"before\" : afterHook ? \"after\" : undefined;\n      if (!type) {\n        return;\n      }\n      const name = beforeHook ? beforeHook.name : afterHook ? afterHook.name : \"hook\";\n      if (name === \"ALLURE_FIXTURE_IGNORE\") {\n        return;\n      }\n\n      const fixtureUuid = this.allureRuntime.startFixture(scopeUuid, type, {\n        name,\n        stage: Stage.RUNNING,\n        start: data.timestamp.nanos / 1000,\n      });\n      if (fixtureUuid) {\n        this.fixtureUuids.set(data.testCaseStartedId, fixtureUuid);\n      }\n      return;\n    }\n\n    if (!step.pickleStepId) {\n      return;\n    }\n\n    const stepPickle = this.pickleStepMap.get(step.pickleStepId)!;\n\n    if (!stepPickle) {\n      return;\n    }\n\n    const stepKeyword =\n      stepPickle.astNodeIds\n        .map((astNodeId) => this.stepMap.get(astNodeId))\n        .map((stepAstNode) => stepAstNode?.keyword)\n        .find((keyword) => keyword !== undefined) || \"\";\n\n    const stepUuid = this.allureRuntime.startStep(testUuid, undefined, {\n      ...createStepResult(),\n      name: `${stepKeyword}${stepPickle.text}`,\n      start: data.timestamp.nanos / 1000,\n    });\n\n    if (!stepPickle.argument?.dataTable) {\n      return;\n    }\n\n    const csvDataTable = stepPickle.argument.dataTable.rows.reduce(\n      (acc, row) => `${acc + row.cells.map((cell) => cell.value).join(\",\")}\\n`,\n      \"\",\n    );\n\n    this.allureRuntime.writeAttachment(testUuid, stepUuid, \"Data table\", Buffer.from(csvDataTable, \"utf-8\"), {\n      contentType: ContentType.CSV,\n      fileExtension: \".csv\",\n    });\n  }\n\n  private onTestStepFinished(data: messages.TestStepFinished) {\n    const step = this.testStepMap.get(data.testStepId);\n    if (!step) {\n      return;\n    }\n\n    const status = this.parseStatus(data.testStepResult);\n    const stage = status !== Status.SKIPPED ? Stage.FINISHED : Stage.PENDING;\n\n    if (step.hookId) {\n      const fixtureUuid = this.fixtureUuids.get(data.testCaseStartedId);\n      if (!fixtureUuid) {\n        return;\n      }\n\n      this.allureRuntime.updateFixture(fixtureUuid, (r) => {\n        r.stage = stage;\n        r.status = status;\n\n        if (data.testStepResult.exception) {\n          r.statusDetails = getMessageAndTraceFromError({\n            message: data.testStepResult.message,\n            stack: data.testStepResult.exception.stackTrace,\n          });\n        }\n      });\n      this.allureRuntime.stopFixture(fixtureUuid, { stop: data.timestamp.nanos / 1000 });\n      this.fixtureUuids.delete(data.testCaseStartedId);\n      return;\n    }\n\n    const testUuid = this.testResultUuids.get(data.testCaseStartedId)!;\n    const currentStep = this.allureRuntime.currentStep(testUuid);\n\n    if (!currentStep) {\n      return;\n    }\n\n    this.allureRuntime.updateStep(currentStep, (r) => {\n      r.status = status;\n      r.stage = stage;\n\n      if (status === undefined) {\n        r.statusDetails = {\n          message: \"The step doesn't have an implementation.\",\n        };\n        return;\n      }\n\n      if (data.testStepResult.exception) {\n        r.statusDetails = {\n          message: data.testStepResult.message,\n          trace: data.testStepResult.exception.stackTrace,\n        };\n      }\n    });\n\n    this.allureRuntime.stopStep(currentStep, { stop: data.timestamp.nanos / 1000 });\n  }\n\n  private onAttachment(message: messages.Attachment): void {\n    if (!message.testCaseStartedId) {\n      return;\n    }\n\n    const fixtureUuid = this.fixtureUuids.get(message.testCaseStartedId);\n    const testUuid = this.testResultUuids.get(message.testCaseStartedId);\n    const rootUuid = fixtureUuid ?? testUuid;\n    if (!rootUuid) {\n      return;\n    }\n\n    if (message.mediaType === \"application/vnd.allure.skipcucumber+json\") {\n      if (testUuid) {\n        this.allureRuntime.updateTest(testUuid, (result) => {\n          result.labels.push({ name: \"ALLURE_TESTPLAN_SKIP\", value: \"true\" });\n        });\n      }\n      return;\n    }\n\n    if (message.mediaType === ALLURE_RUNTIME_MESSAGE_CONTENT_TYPE) {\n      const parsedMessage = JSON.parse(message.body);\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      this.allureRuntime.applyRuntimeMessages(rootUuid, Array.isArray(parsedMessage) ? parsedMessage : [parsedMessage]);\n      return;\n    }\n\n    const encoding: BufferEncoding = message.contentEncoding === AttachmentContentEncoding.BASE64 ? \"base64\" : \"utf-8\";\n\n    this.allureRuntime.applyRuntimeMessages(rootUuid, [\n      {\n        type: \"attachment_content\",\n        data: {\n          name: message.fileName ?? \"Attachment\",\n          content: Buffer.from(message.body, encoding).toString(\"base64\"),\n          encoding: \"base64\",\n          contentType: message.mediaType,\n          fileExtension: message.fileName ? extname(message.fileName) : undefined,\n          wrapInStep: true,\n        },\n      },\n    ]);\n  }\n\n  private onTestRunFinished() {\n    this.allureRuntime.writeCategoriesDefinitions();\n    this.allureRuntime.writeEnvironmentInfo();\n  }\n}\n"],"mappings":"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","ignoreList":[]}